#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h> 
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/input_transform.h>


#define ZMK_MOUSE_DEFAULT_SCRL_VAL 20    // 10
#include <dt-bindings/zmk/mouse.h>
#include <input/processors.dtsi>


#define DEFAULT 0
#define NAV     1
#define SYM     2
#define FUNC    3
#define NUM     4


&caps_word { continue-list = <UNDERSCORE MINUS>; };
&mmv {
    acceleration-exponent = <1>;      // 1
    time-to-max-speed-ms = <500>;     // 300
    delay-ms = <0>;                   // 0
};
&msc {
    acceleration-exponent = <1>;      // 0
    time-to-max-speed-ms = <50>;      // 300
    delay-ms = <0>;                   // 0
};


/ {
    combos {
        compatible = "zmk,combos";

        delete {
            timeout-ms = <50>;
            key-positions = <21 22>;
            bindings = <&kp DEL>;
        };
        backsspace {
            timeout-ms = <50>;
            key-positions = <27 28>;
            bindings = <&kp BACKSPACE>;
        };
        escape{
            timeout-ms = <50>;
            key-positions = <1 2>;
            bindings = <&kp ESCAPE>;
        };
        enter{
            timeout-ms= <50>;
            key-positions = <22 23>;
            bindings = <&kp ENTER>;
        };
    };
};

/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        hs: homerow_shift {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <175>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
        };   
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "BONE2";
            bindings = <
            &kp LA(LS(N7))  &kp LA(NUMBER_4)&kp LA(N)   &kp LS(N5)  &kp LS(NUMBER_6)    &kp LS(EQUAL)   &kp LA(LS(N6))  &kp LS(COMMA)   &kp LS(DOT) &kp LS(N4)
            &kp J           &kp D           &kp U       &kp A       &kp X               &kp P           &kp H           &kp L           &kp M       &kp W
&kp LSHIFT  &kp C           &hm LCTL T      &hm LALT I  &hs LGUI E  &kp O               &kp B           &hs RGUI N      &hm RALT R      &hm RCTL S  &kp G       &kp RSHIFT
            &kp F           &kp V           &kp LBKT    &kp SQT     &kp SEMI            &kp Z           &kp Y           &kp MINUS       &kp Q       &kp K
                            &kp ESCAPE      &kp U                                                                       &kp ENTER                                           
                                            &lt NUM TAB &lt NAV SPACE &kp U             &lt SYM ENTER   &lt FUNC  ESCAPE
                                                                                                        &kp N

            >;
    };
    };
    trackball_peripheral_listener {
        snipe {
            layers = <NAV>;
            input-processors = <&zip_xy_scaler 1 4>;
        };

        scroll {
            layers = <NUM>;
            input-processors = <&zip_xy_transform (INPUT_TRANSFORM_Y_INVERT)>,<&zip_xy_to_scroll_mapper>, <&zip_scroll_scaler 1 16>;
        };
    };
};
